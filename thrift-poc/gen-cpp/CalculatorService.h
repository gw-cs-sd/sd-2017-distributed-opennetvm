/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalculatorService_H
#define CalculatorService_H

#include <thrift/TDispatchProcessor.h>
#include "calculator_types.h"



class CalculatorServiceIf {
 public:
  virtual ~CalculatorServiceIf() {}
  virtual int32_t add(const int32_t num1, const int32_t num2) = 0;
};

class CalculatorServiceIfFactory {
 public:
  typedef CalculatorServiceIf Handler;

  virtual ~CalculatorServiceIfFactory() {}

  virtual CalculatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorServiceIf* /* handler */) = 0;
};

class CalculatorServiceIfSingletonFactory : virtual public CalculatorServiceIfFactory {
 public:
  CalculatorServiceIfSingletonFactory(const boost::shared_ptr<CalculatorServiceIf>& iface) : iface_(iface) {}
  virtual ~CalculatorServiceIfSingletonFactory() {}

  virtual CalculatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorServiceIf> iface_;
};

class CalculatorServiceNull : virtual public CalculatorServiceIf {
 public:
  virtual ~CalculatorServiceNull() {}
  int32_t add(const int32_t /* num1 */, const int32_t /* num2 */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _CalculatorService_add_args__isset {
  _CalculatorService_add_args__isset() : num1(false), num2(false) {}
  bool num1;
  bool num2;
} _CalculatorService_add_args__isset;

class CalculatorService_add_args {
 public:

  CalculatorService_add_args() : num1(0), num2(0) {
  }

  virtual ~CalculatorService_add_args() throw() {}

  int32_t num1;
  int32_t num2;

  _CalculatorService_add_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_num2(const int32_t val) {
    num2 = val;
  }

  bool operator == (const CalculatorService_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const CalculatorService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalculatorService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalculatorService_add_pargs {
 public:


  virtual ~CalculatorService_add_pargs() throw() {}

  const int32_t* num1;
  const int32_t* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalculatorService_add_result__isset {
  _CalculatorService_add_result__isset() : success(false) {}
  bool success;
} _CalculatorService_add_result__isset;

class CalculatorService_add_result {
 public:

  CalculatorService_add_result() : success(0) {
  }

  virtual ~CalculatorService_add_result() throw() {}

  int32_t success;

  _CalculatorService_add_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const CalculatorService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CalculatorService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalculatorService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalculatorService_add_presult__isset {
  _CalculatorService_add_presult__isset() : success(false) {}
  bool success;
} _CalculatorService_add_presult__isset;

class CalculatorService_add_presult {
 public:


  virtual ~CalculatorService_add_presult() throw() {}

  int32_t* success;

  _CalculatorService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorServiceClient : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CalculatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const int32_t num1, const int32_t num2);
  void send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorServiceProcessor(boost::shared_ptr<CalculatorServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &CalculatorServiceProcessor::process_add;
  }

  virtual ~CalculatorServiceProcessor() {}
};

class CalculatorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorServiceProcessorFactory(const ::boost::shared_ptr< CalculatorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorServiceIfFactory > handlerFactory_;
};

class CalculatorServiceMultiface : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceMultiface(std::vector<boost::shared_ptr<CalculatorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorServiceIf> > ifaces_;
  CalculatorServiceMultiface() {}
  void add(boost::shared_ptr<CalculatorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add(const int32_t num1, const int32_t num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

};



#endif
